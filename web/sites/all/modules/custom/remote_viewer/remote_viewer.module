<?php
/**
 * @file
 * Main remote_viewer module file.
 */

/**
 * Implements hook_help().
 */
function remote_viewer_help($path, $arg) {
  switch ($path) {
    case 'admin/config/content/remote_viewer':
      // Help text.
      return t('<h1>Setup</h1><ul><li>Goto admin/config/content/remote_viewer (here)<ul><li>View remote DBs defined in settings.php</li></ul></li><li>Goto each remote view</li><ul><li>Select a remote DB for selected remote view</li></ul></ul>');
  }
}
/**
 * Implements hook_menu().
 */
function remote_viewer_menu() {
  $items['admin/config/content/remote_viewer'] = array(
    'title' => 'Remote Viewer Configuration',
    'description' => 'Configure Remote Viewer',
    'page callback' => 'remote_viewer_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/settings.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function remote_viewer_entity_info_alter(&$entity_info) {
  $entity_info['node']['controller class'] = 'RemoteViewerNodeController';
  $entity_info['bean']['controller class'] = 'RemoteViewerBeanEntityAPIController';
}
/**
 * Implements hook_entity_view_alter().
 */
function remote_viewer_entity_view_alter(&$build, $type) {
  global $databases;

  $remote_content = RemoteViewerContentController::$remoteContent;

  // Remote View.
  if (!empty($remote_content)) {
    $remote_server  = $databases[$remote_content]['default']['server'];
    foreach ($build as &$build_value) {
      if (is_array($build_value)) {
        if (array_key_exists('#field_type', $build_value)) {
          //protocol needs to be set outside file type conditional
          $protocol = 'http';
          // Images need to be https if server is https.
          if (isset($_SERVER['HTTPS'])) {
            $protocol = 'https';
          }
          // File type.
          if ($build_value['#field_type'] == 'file') {
            $uri = $build_value[0]['#file']->uri;
            $file_name = str_replace('public://', '', $uri);

            $uri = $protocol . '://' . $remote_server . '/sites/default/files/' . $file_name;
            $build_value[0]['#file']->uri = $uri;
          }
          // Entity References.
          if ($build_value['#field_type'] == 'entityreference') {
            $node = $build_value['#items'][0]['target_id'];
            $previous_db = db_set_active($remote_content);
            $result = db_query("SELECT alias FROM url_alias WHERE source = 'node/$node'")->fetchField();
            db_set_active($previous_db);
            $build_value['#remote'] = $protocol . '://' . $remote_server . '/' . $result;
          }
        }
      }

    }
  }
}
/**
 * Implements hook_field_formatter_info_alter().
 */
function remote_viewer_field_formatter_info_alter(&$info) {
  if (!empty($info['picture'])) {
    // Add remote picture formatter.
    $info['remote_picture']           = $info['picture'];
    $info['remote_picture']['label']  = t('Remote picture');
    $info['remote_picture']['module'] = 'remote_viewer';
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Access at /admin/structure/types/manage/CONTENT TYPE NAME/display.
 */
function remote_viewer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = &$instance['display'][$view_mode];
  $formatter = $display['type'];

  if ($formatter == 'remote_picture') {
    // Field type is image so it does not fit simple pattern below.
    return picture_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  }

}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Access at /admin/structure/types/manage/CONTENTNAME/display.
 */
function remote_viewer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display    = &$instance['display'][$view_mode];
  $formatter  = $display['type'];

  if ($formatter == 'remote_picture') {
    // Field type is image so it does not fit simple pattern below.
    return picture_field_formatter_settings_summary($field, $instance, $view_mode);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function remote_viewer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  if ($field['type'] == 'image') {
    foreach ($items as &$item) {
      $item['uri'] = _remote_viewer_scheme_mark($item['uri']);
    }
    if (strpos($display['type'], 'remote_picture') === 0) {
      $display['type'] = substr($display['type'], 7);
      return picture_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
    }
    return image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
}

/**
 * Marks the stream wrapper scheme for later modification.
 */
function _remote_viewer_scheme_mark($uri) {
  if (RemoteViewerContentController::$remoteContent) {
    $scheme = file_uri_scheme($uri);
    if ($scheme) {
      $uri = str_replace("$scheme://", "__remote_viewer__$scheme://", $uri);
    }
  }
  return $uri;
}

/**
 * Implements hook_file_url_alter().
 */
function remote_viewer_file_url_alter(&$uri) {
  if (!RemoteViewerContentController::$remoteContent) {
    return;
  }
  $scheme = file_uri_scheme($uri);

  if ($scheme && strpos($uri, '__remote_viewer__') === 0) {

    global $databases;

    $remote_content = RemoteViewerContentController::$remoteContent;
    $remote_server   = $databases[$remote_content]['default']['server'];

    $protocol = 'http';
    // Images need to be https if server is https.
    if (isset($_SERVER['HTTPS'])) {
      $protocol = 'https';
    }

    $uri  = str_replace('__remote_viewer__', '', $uri);
    $url  = $protocol . '://' . $remote_server;
    $path = 'sites/default/files';
    $uri  = str_replace('public://', $url . '/' . $path . '/', $uri);
  }

}

/**
 * Implements hook_views_api().
 */
function remote_viewer_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'remote_viewer') . '/views',
  );
}

/**
 * Implements hook_media_wysiwyg_token_to_markup_alter().
 */
function remote_viewer_media_wysiwyg_token_to_markup_alter(&$element, $tag_info, $settings) {
  if (!RemoteViewerContentController::$remoteContent) {
    return;
  }
  if ($element['content']['file']['#attributes']['class'][0] == 'file') {
    $uri = $element['content']['file']['#file']->uri;
    $element['content']['file']['#file']->uri = '__remote_viewer__'.$uri;
  }
  if ($element['content']['#bundle'] == 'image') {
    $uri = $element['content']['file']['#item']['uri'];
    $element['content']['file']['#item']['uri'] = '__remote_viewer__'.$uri;
  }
}


/**
 * Class with a semaphore to control remote DB toggle.
 */
class RemoteViewerContentController {
  // Toggle remote DB on and off via this variable.
  static public $remoteContent = '';

}
