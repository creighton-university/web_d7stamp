<?php

/**
 * Implements hook_backup_migrate_filters().
 *
 * Provides filter definition(s) to Backup and Migrate module.
 */
function environment_variables_backup_migrate_filters() {
  return array(
    'environment_variables' => array(
      'file' => drupal_get_path('module', 'environment_variables') .'/filters.environment_variables.inc',
      'class' => 'environment_variables_backup_migrate_filter'
    )
  );
}

/**
 * Implementation of hook_form_alter().
 *
 * Add autodetected environment, environment override, and controlled settings fields to Site Information form
 */
function environment_variables_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'system_site_information_settings') {
    $form_mod[key($form)] = array_shift($form);
    $form_mod['environment_variables'] = array(
      '#type' => 'fieldset',
      '#title' => t('Environment Variables'),
    );
    $form_mod['environment_variables']['environment_variables_autodetect_environment'] = array(
      '#type' => 'item',
      '#title' => t('Autodetected Environment'),
      '#description' => t('Environment was automatically detected as <strong><em>' . variable_get('environment_variables_autodetect_environment') . '</em></strong>'),
    );
    $form_mod['environment_variables']['environment_variables_environment'] = array(
      '#type' => 'radios',
      '#title' => t('Environment Override'),
      '#description' => t('Override the autodetected environment; please review the <strong>Settings to Control</strong> list if updated'),
      '#options' => array('dev' => t('Development'), 'stage' => t('Stage'), 'prod' => t('Production')),
      '#default_value' => variable_get('environment_variables_environment', variable_get('environment_variables_autodetect_environment')),
      '#required' => TRUE,
      '#ajax' => array(
        'callback' => '_environment_variables_environment_ajax_callback',
        'wrapper' => 'environment_variables_controlled_settings_container',
      ),
    );
    $form_mod['environment_variables']['environment_variables_controlled_settings'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Settings to Control'),
      '#options' => _environment_variables_controlled_settings_options($form_state),
      '#default_value' => ($form_state['rebuild']) ? $form_state['values']['environment_variables_controlled_settings'] : array_filter(variable_get('environment_variables_controlled_settings', array())),
      '#prefix' => '<div id="environment_variables_controlled_settings_container">',
      '#suffix' => '</div>',
    );
    $form = array_merge($form_mod, $form);
    // custom submit handler to immediately apply controlled settings
    $form['#validate'][] = '_environment_variables_form_submit';
  }
}

/**
 * Implements hook_cron().
 *
 * Includes and executes function to set variables for controlled settings
 */
function environment_variables_cron() {
  // include applysettings file and run applysettings script
  module_load_include('inc', 'environment_variables', 'environment_variables.applysettings');
  _environment_variables_applysettings();
}

function _environment_variables_environment_ajax_callback($form, $form_state) {
  return $form['environment_variables']['environment_variables_controlled_settings'];
}

function _environment_variables_controlled_settings_options(&$form_state) {
  if(isset($form_state['values'])) {
    $cval = $form_state['values']['environment_variables_environment'];
  } else {
    $cval = variable_get('environment_variables_environment', variable_get('environment_variables_autodetect_environment'));
  }
  $opts = variable_get('environment_variables');
  foreach($opts[$cval] as $key=>$val) {
    $rval[$key] = $val['name'];
/*
 *  exclude disabled modules from list to control
    if(! isset($val['disabled'])) {
      $rval[$key] = $val['name'];
    }
*/
  }
  return $rval;
}

function _environment_variables_form_submit($form, &$form_state) {
  // include applysettings file and run applysettings script
  module_load_include('inc', 'environment_variables', 'environment_variables.applysettings');
  _environment_variables_applysettings();
}
